import re, urlparse, cgi, urllib, urllib2, cookielib, urlparse, stringfrom BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'def NormalizeURL(url):	#Log("*********** In Zalaa normalizeURL")		# Deal with special providerInfo URL built up by plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			try:			show = Prefs["show_zalaa"]		except Exception, ex:			show = True					if (show):			return url + "&supported=true"		else:			return url				else:		return url		def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for Zalaa (' + url + ')')		video = VideoClipObject(		title = 'Zalaa Redirect Page',		summary = 'Zalaa Redirect Page',		thumb = None,	)		return videodef MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret  	def PlayVideo(url):	#Log('In MediaObjectsForURL for Zalaa (' + url + ')')		# Request provider page.	try:		#Log('Requesting ' + url)		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		response = urllib2.urlopen(request)				# Collect final url (in case of 302 or the like) and read in page.		provider_url = response.geturl()		#Log(provider_url)			except Exception, ex:		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)				# Collect filename. Will need that for later.	file_name = urlparse.urlparse(url).path.split("/")[1]	#Log(file_name)		soup = BeautifulSoup(response.read())		# Extract out these form elements from the provider page...	try:		formElems = ['op', 'id', 'fname', 'method_free', 'referer', 'usr_login', 'ipcount_val']		params = {}				for formElem in formElems:			formElemVal =  soup.find('input', {'name' : formElem })['value']			params[formElem] = formElemVal	except Exception, ex:		return LogProviderError("Error whilst retrieving information to go from intial page to next page. Page URL was: " + url, ex)					#Log(params)		try:		# Submit the form. This wil give us a page with the flash player.		HTTP.Headers['User-agent'] = USER_AGENT		headers = { 'Referer': provider_url }		content = HTTP.Request(provider_url, cacheTime=0, values=params, headers=headers).content	except Exception, ex:		return LogProviderError("Error whilst retrieving video page (" + provider_url + ")", ex)				soup = BeautifulSoup(content)	#Log(content)	final_url = None		# See how we're going to retrieve the file name....	if (soup.find('span', { 'id' : 'flvplayerid' })) is None:				try:			script = soup.find('div', { 'id': 'player_code' }).script.string						# Look for substitution values.			elems = re.search("\d{2},'([^']*)'.split", script).group(1).split('|')			#Log(elems)						# Look for url to substitute values into.			url = re.search("([0-9a-z]*://[0-9a-z]*\.[0-9a-z]*\.[0-9a-z]*\:[0-9a-z]*/([0-9a-z]*/?)*[0-9a-z.\-_ ()]*)", script)			#Log(url)						# Create dict to map url sub keys to sub values.			alphadict = dict()			for index_cnt in range(0, 2):				index = index_cnt * len(string.digits + string.ascii_lowercase)				strindex = str(index_cnt) if index_cnt > 0 else ""				for cnt in range(0, len(string.digits + string.ascii_lowercase)):					alphadict[strindex + (string.digits + string.ascii_lowercase)[cnt]] = cnt + index							def SubElem(matchObj):				val = elems[alphadict[matchObj.group(0)]]				if (val == ""):					val = matchObj.group(0)				return val				# Sub values into url.			final_url = re.sub("[0-9a-z]{1,2}", SubElem, url.group(1)) 					except Exception, ex:			return LogProviderError("Error whilst unpacking video URL.", ex)	else:			# Get file URL.		#Log("Using FLV Player")		file = re.search("s1.addVariable\('file','([^']*)'\);", content)				if file is None:			return LogProviderError("Error whilst extractingt out video URL from FLV player config.")					final_url = file.group(1)		Log(final_url)		return Redirect(final_url)	def LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	return []