import re, urlparse, cgi, urllib, urllib2, cookielib, urlparsefrom BeautifulSoup import BeautifulSoupfrom htmlentitydefs import name2codepoint as n2cpUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'API_URL = "http://%s/api/player.api.php?pass=undefined&file=%s&user=undefined&key=%s&codes=undefined"def NormalizeURL(url):	#Log("*********** In MovShare normalizeURL")	# Deal with special providerInfo URL built up by plugin to return	# info about this provider. For all other normal URLs, do nothing. 	if ("providerinfo" in url):			# Extract out domain.		match = re.search("(movshare|novamov|nowvideo|divxstage|videoweed)", url.lower())		if (match is None):			return url			try:			show = Prefs["show_" + match.group(1)]		except Exception, ex:			show = False					if (show):			return url + "&supported=true"		else:			return url				else:		return url		def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for MovShare (' + url + ')')		video = VideoClipObject(		title = 'MovShare Redirect Page',		summary = 'MovShare Redirect Page',		thumb = None,	)		return videodef MediaObjectsForURL(url):	ret = []	ret.append(		MediaObject(			parts = [PartObject(key=Callback(PlayVideo, url=url))],		)	)	  	return ret@indirect	def PlayVideo(url):		cj = cookielib.CookieJar()	opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))		# Request Initial Provider page.	try:		#Log('Requesting ' + url)		request = urllib2.Request(url)		request.add_header('User-agent', USER_AGENT)		response = opener.open(request)			# Read in location and content of MovShare page.			soup = BeautifulSoup(response.read())			provider_url = response.geturl()		#Log(provider_url)						except Exception, ex:		return LogProviderError("Error whilst retrieving initial provider page (" + url + ")", ex)			# See if we have a form to submit before video page...	form = soup.find('form', { 'id' : 'watch' })		if (form is not None):			# Submit the form to be taken to video page.		try:			# Get params to submit form with.			params = {}			for elem in form.findAll('input', {'type' : 'hidden' }):								params[elem['name']] = elem['value']						#Log("Params: " + str(params))			#Log('Requesting ' + provider_url)						# Post to form			request = urllib2.Request(provider_url)			request.add_header('User-agent', USER_AGENT)			request.add_data(urllib.urlencode(params))			response = opener.open(request)				soup = BeautifulSoup(response.read())					except Exception, ex:			return LogProviderError("Error whilst trying to navigate from initial provider page to video page (" + url + ")", ex)			# Read in API Key info and file ID from cideo page. 	try:		#Log(soup.contents)		api_key = re.search("flashvars\.filekey=\"(.*)\"", str(soup.contents)).group(1)		file_id = re.search("flashvars\.file=\"(.*)\"", str(soup.contents)).group(1)		#Log("API KEY:" + api_key)		#Log("File ID:" + file_id)	except Exception, ex:		return LogProviderError("Error whilst retrieving API Key and File ID. Provider may have changed page layout.", ex)				# Get final video location from API.	try:			# Build up and retrieve API URL		api_url = API_URL % (			urlparse.urlparse(provider_url).netloc,			file_id,			urllib.quote_plus(api_key)		)			#Log('Requesting ' + api_url)		request = urllib2.Request(api_url)		request.add_header('User-agent', USER_AGENT)		response = opener.open(request)				content = response.read()		#Log(content)				# API should be HTML form encoded query string. Break it down to get elem we're		# interested in.		api_info = cgi.parse_qs(content)		final_url = api_info['url'][0]			except Exception, ex:		return LogProviderError("Error whilst retrieving final url from API page.", ex)			Log(final_url)		oc = ObjectContainer(		objects = [			VideoClipObject(				items = [					MediaObject(						parts = [PartObject(key=final_url)]					)				]			)		]	)	# Might as well set a sensible user agent string.	oc.user_agent = USER_AGENT		return oc	def LogProviderError(msg="", ex=None):	Log("************************** PROVIDER ERROR: " + msg)	return []