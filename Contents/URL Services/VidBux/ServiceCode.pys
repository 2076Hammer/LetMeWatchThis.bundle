import re, urlparse, cgi, urllib2, stringfrom BeautifulSoup import BeautifulSoupUSER_AGENT = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_2) AppleWebKit/534.51.22 (KHTML, like Gecko) Version/5.1.1 Safari/534.51.22'	def MetadataObjectForURL(url): 	#Log('In MetadataObjectForURL for VidBux / VidxDen (' + url + ')')		video = VideoClipObject(		title = 'VidBux / VidxDen Redirect Page',		summary = 'VidBux / VidxDen Redirect Page',		thumb = None,	)		return videodef MediaObjectsForURL(url):	# Request provider page.	#Log('Requesting ' + url)	request = urllib2.Request(url)	request.add_header('User-agent', USER_AGENT)	response = urllib2.urlopen(request)		# Collect final url and read in MovPod page.	provider_url = response.geturl()	#Log(provider_url)	soup = BeautifulSoup(response.read())		# Extract out these form elements...	formElems = ['op', 'id', 'fname', 'method_free', 'referer', 'usr_login']	params = {}		for formElem in formElems:		formElemVal =  soup.find('input', {'name' : formElem })['value']		params[formElem] = formElemVal					#Log(params)		# Submit form by re-requesting page with right params.	HTTP.Headers['User-agent'] = USER_AGENT	headers = { 'Referer': url }	content = HTTP.Request(provider_url, values=params, headers=headers).content	soup = BeautifulSoup(content)	#Log(content)		# Exctract out JS packed final video URL.	script_elems = soup.find('div', { 'id': 'embedcontmvshre' }).findAll('script')	elems = None	url = None	for script_elem in script_elems:			script = script_elem.string		if script is None:			continue					#Log(script)			# Look for substitution values.		sub_vals = re.search("\d{2},'([^']*)'.split", script)		if (sub_vals is None):			continue				elems = sub_vals.group(1).split('|')		#Log(elems)			# Look for url to substitute values into.		url_re = re.search("([0-9a-z]*://[0-9a-z]*\.[0-9a-z]*\.[0-9a-z]*\:[0-9a-z]*/([0-9a-z]*/)*[0-9a-z.\-_ ()]*)", script)		#Log(url_re.group(1))				if (url_re is None or url_re.group(1) is None):			continue				url = url_re.group(1)	if (elems is None or url is None):		return			# Create dict to map url sub keys to sub values.	alphadict = dict()	for index_cnt in range(0, 2):		index = index_cnt * len(string.digits + string.ascii_lowercase)		strindex = str(index_cnt) if index_cnt > 0 else ""		for cnt in range(0, len(string.digits + string.ascii_lowercase)):			alphadict[strindex + (string.digits + string.ascii_lowercase)[cnt]] = cnt + index		def SubElem(matchObj):		val = elems[alphadict[matchObj.group(0)]]		if (val == ""):			val = matchObj.group(0)		return val	# Sub values into url to get final url.	final_url = re.sub("[0-9a-z]{1,2}", SubElem, url) 	Log(final_url)		ret = []	ret.append(		MediaObject(			parts = [PartObject(key=final_url)],		)	)  	return ret