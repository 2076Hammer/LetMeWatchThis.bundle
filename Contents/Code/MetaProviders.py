import randomfrom datetime import datetimefrom urllib import quote_plusMOVIEDB_URL = "http://api.themoviedb.org/2.1/Movie.imdbLookup/en/xml/e3dde0b795a9eca51531ce9f8e688ff6/"TVDB_URL = "http://www.imdbapi.com/?i="class DBProvider(object):	def __init__(self):		pass	def GetProvider(self, type=None):		if (type=="movies"):			return MovieDBProvider()		elif (type=="tv"):			return TVDBProvider()		else:			return TVDBProvider()################################################################################ Helper class to retrieve info from TheMovieDB.class MovieDBProvider(object):	def RetrieveItemFromProvider(self, item):			#try:					#Log("Fetching info for: " + item)						title = quote_plus(unicode(item).encode('utf-8'))			url = MOVIEDB_URL + title						#Log("Using URL: " + url)			movie_page = XML.ElementFromURL(url,cacheTime=100000)			resultsCount = movie_page.xpath("/OpenSearchDescription/opensearch:totalResults/text()",namespaces={"opensearch":"http://a9.com/-/spec/opensearch/1.1/"})[0]						mediaInfo = MediaInfo()			mediaInfo.type = "movies"			mediaInfo.title = str(item)						# Save the date we last tried to retrieve the info for this item.			# This'll be used to know when to try to re-retrieve the info.			mediaInfo.dt = datetime.utcnow()						if(resultsCount <> '0') :							mediaInfo.id = str(item)							xpRes = movie_page.xpath("/OpenSearchDescription/movies/movie")				if (len(xpRes) > 0):					movie = xpRes[0]				else:					return									xpRes = movie.xpath("./id/text()")				if (len(xpRes) > 0):					mediaInfo.tmdb_id = str(xpRes[0])									xpRes = movie.xpath("./name/text()")				if (len(xpRes) > 0):					mediaInfo.title = str(xpRes[0])									mediaInfo.background = self.MovieDBGetImage(movie, "backdrop", ["w1280", "poster", "original"],False)				mediaInfo.poster = self.MovieDBGetImage(movie, "backdrop", ["w342", "original"],True)								xpRes = movie.xpath("./overview/text()")				if (len(xpRes) > 0):					mediaInfo.summary = str(xpRes[0])									xpRes = movie.xpath("./rating/text()")								if (len(xpRes) > 0):					mediaInfo.rating = int(float(xpRes[0]))									#Log("Saving object: " + item)			#Log(str(mediaInfo))			return mediaInfo					#except Exception, ex:			#Log("Exception")			#Log(ex)							def MovieDBGetImage(self, movie, type, sizes, rand):		#Log("In get image")		for size in sizes:			#Log("Checking for...." + size)			xpRes = movie.xpath("./images/image[@size='" + size + "' and @type='" + type + "']/@url")			if (len(xpRes) > 0):				#Log("Returning...." + xpRes[0])				index = 0				if rand:					index = random.randint(0,len(xpRes) -1)				return str(xpRes[index])					Log("Image not found for any of the specified sizes.")		return ""################################################################################ Helper class that should retrieve info from somewhere.# However, no easily queryable data source have been found, so just letting# this return an empty mediaInfo object for the time being.class TVDBProvider(object):	def RetrieveItemFromProvider(self, item):			mediaInfo = MediaInfo()		mediaInfo.type = "tv"		mediaInfo.id = str(item)		mediaInfo.title = None		return mediaInfo################################################################################ Meta Data classclass MediaInfo(object):	def __init__(		self, id = None, title = None, type = None, year = None, background = None,		poster = None,  summary = None, rating = None, duration = None, releasedate = None,		genres = [], dt = None, show_name = None, season = None	):			self.id = id		self.title = title		self.type = type		self.year = year		self.background = background		self.poster = poster		self.summary = summary		self.rating = rating		self.duration = duration		self.releasedate = releasedate		self.genres = genres		self.dt = dt		self.show_name = show_name		self.season = season			def __str__(self):			return (			"{ " +			"id: " + str(self.id) + ", " +			"title: " + str(self.title) + ", " +			"type: " + str(self.type) + ", " +			"year: " + str(self.year) + ", " +			"background:" + str(self.background) + ", " +			"poster: " + str(self.poster) + ", " +			"summary: " + str(self.summary) + ", " +			"rating:" + str(self.rating) + ", " +			"duration:" + str(self.duration) + ", " +			"genres:" + str(self.genres) + ", " +			"release date:" + str(self.releasedate) + ", " +			"show name:" + str(self.show_name) + ", " +			"season:" + str(self.season) + ", " +			"}"		)